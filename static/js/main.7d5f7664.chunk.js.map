{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","currentPayload","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoInfo","id","title","completed","dispatch","className","classNames","onClick","actionsCurrentTodo","TodoList","filterParams","useState","visibleTodos","setVisibleTodos","useEffect","filteringTodos","string","substring","toLocaleLowerCase","includes","updateVisibleTodos","length","map","TodoFilter","onSubmit","event","preventDefault","onChange","actionsFilter","updateFilterParam","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","setUser","loadUser","a","userId","userFromServer","href","email","name","App","currentTodos","loadTodos","todosFromServer","actionsTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d5f7664.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type Payload = { query: string, status: string };\ntype ActiveTodosAction = { type: 'filterTodo/ACTIVE', payload: Payload };\ntype CompletedTodosAction = { type: 'filterTodo/COMPLETED', payload: Payload };\ntype AllTodosAction = { type: 'filterTodo/ALL', payload: Payload };\ntype QueryTodosAction = { type: 'filterTodo/QUERY', payload: Payload };\n\ntype Action = ActiveTodosAction\n| CompletedTodosAction\n| AllTodosAction\n| QueryTodosAction;\n\nlet currentPayload: Payload = {\n  query: '',\n  status: 'all',\n};\n\nconst filterQueryTodos = (query: string): QueryTodosAction => ({\n  type: 'filterTodo/QUERY',\n  payload: { ...currentPayload, query },\n});\n\nconst filterAllTodos = (status: string): AllTodosAction => ({\n  type: 'filterTodo/ALL',\n  payload: { ...currentPayload, status },\n});\n\nconst filterActiveTodos = (status: string): ActiveTodosAction => ({\n  type: 'filterTodo/ACTIVE',\n  payload: { ...currentPayload, status },\n});\n\nconst filterCompletedTodos = (status: string): CompletedTodosAction => ({\n  type: 'filterTodo/COMPLETED',\n  payload: { ...currentPayload, status },\n});\n\nexport const actions = {\n  filterAllTodos,\n  filterActiveTodos,\n  filterCompletedTodos,\n  filterQueryTodos,\n};\n\nconst filterReducer = (\n  state: Payload = { query: '', status: 'all' }, action: Action,\n) => {\n  switch (action.type) {\n    case 'filterTodo/ACTIVE':\n    case 'filterTodo/COMPLETED':\n    case 'filterTodo/ALL':\n    case 'filterTodo/QUERY':\n      currentPayload = { ...action.payload };\n\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = { type: 'todos/ADD', payload: Todo[] };\n\nconst add = (todos: Todo[]): AddAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { add };\n\nconst todosReducer = (todos: Todo[] = [], action: AddAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  id: number,\n  title: string,\n  completed: boolean,\n};\n\nexport const TodoInfo: FC<Props> = ({\n  todo,\n  id,\n  title,\n  completed,\n}) => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const setCurrentTodo = () => {\n    dispatch(actionsCurrentTodo.setTodo(todo));\n  };\n\n  return (\n    <>\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames(\n          {\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          },\n        )}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={setCurrentTodo}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              {\n                'fa-eye': currentTodo?.id !== id,\n                'fa-eye-slash': currentTodo?.id === id,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\nfunction isContains(string: string, substring: string): boolean {\n  return string.toLocaleLowerCase().includes(substring.toLocaleLowerCase());\n}\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filterParams = useAppSelector(state => state.filter);\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  const updateVisibleTodos = () => {\n    const filteringTodos = todos.filter(\n      todo => isContains(todo.title, filterParams.query),\n    );\n\n    switch (filterParams.status) {\n      case 'active':\n        setVisibleTodos(\n          filteringTodos.filter(todo => !todo.completed),\n        );\n        break;\n\n      case 'completed':\n        setVisibleTodos(\n          filteringTodos.filter(todo => todo.completed),\n        );\n        break;\n\n      case 'all':\n        setVisibleTodos(filteringTodos);\n        break;\n\n      default:\n        setVisibleTodos(filteringTodos);\n        break;\n    }\n  };\n\n  useEffect(() => {\n    updateVisibleTodos();\n  }, [filterParams]);\n\n  return (\n    <>\n      {visibleTodos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <TodoInfo\n                  todo={todo}\n                  id={todo.id}\n                  completed={todo.completed}\n                  title={todo.title}\n                />\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsFilter } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n  const updateQueryFilter = (query: string) => {\n    dispatch(actionsFilter.filterQueryTodos(query));\n  };\n\n  const clearQuery = () => {\n    dispatch(actionsFilter.filterQueryTodos(''));\n  };\n\n  const updateFilterParam = (status: string) => {\n    switch (status) {\n      case 'active':\n        dispatch(actionsFilter.filterActiveTodos(status));\n        break;\n\n      case 'completed':\n        dispatch(actionsFilter.filterCompletedTodos(status));\n        break;\n\n      case 'all':\n        dispatch(actionsFilter.filterAllTodos(status));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => updateFilterParam(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={(event) => updateQueryFilter(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"clearSearchButton\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const loadUser = async () => {\n    if (currentTodo) {\n      const userFromServer = await getUser(currentTodo.userId);\n\n      setUser(userFromServer);\n    }\n  };\n\n  const removeCurrentTodo = () => {\n    dispatch(actionsCurrentTodo.removeTodo());\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              { `Todo #${currentTodo?.id}` }\n            </div>\n\n            <button\n              aria-label=\"closeModalButton\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              { currentTodo?.title }\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as actionsTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodos = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(actionsTodos.add(todosFromServer));\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length ? <TodoList /> : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodos && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}